package pipeline

import (
	"os"
	"path/filepath"
	"testing"
)

func TestRunGeneratesEffectCatalogModule(t *testing.T) {
	tempDir := t.TempDir()
	contractsDir := filepath.Join(tempDir, "contracts")
	if err := os.MkdirAll(contractsDir, 0o755); err != nil {
		t.Fatalf("failed to create contracts dir: %v", err)
	}
	registryPath := filepath.Join(contractsDir, "registry.go")
	if err := os.WriteFile(registryPath, []byte("package contract\n"), 0o644); err != nil {
		t.Fatalf("failed to write registry stub: %v", err)
	}

	definitionsPath := filepath.Join(tempDir, "definitions.json")
	definitions := `[
  {
    "id": "fireball",
    "contractId": "fireball",
    "definition": {
      "typeId": "fireball",
      "client": {"sendSpawn": true}
    },
    "jsEffect": "projectile/fireball",
    "parameters": {"speed": 320}
  },
  {
    "id": "attack",
    "contractId": "attack",
    "definition": {"typeId": "attack"}
  }
]`
	if err := os.WriteFile(definitionsPath, []byte(definitions), 0o644); err != nil {
		t.Fatalf("failed to write definitions stub: %v", err)
	}

	outputPath := filepath.Join(tempDir, "out", "effect-contracts.ts")
	opts := Options{
		ContractsDir:    contractsDir,
		RegistryPath:    registryPath,
		DefinitionsPath: definitionsPath,
		OutputPath:      outputPath,
	}

	if err := Run(opts); err != nil {
		t.Fatalf("Run returned error: %v", err)
	}

	data, err := os.ReadFile(outputPath)
	if err != nil {
		t.Fatalf("failed to read generated output: %v", err)
	}

	expected := `// Code generated by effectsgen. DO NOT EDIT.

export type EffectCatalogEntry = {
  readonly contractId: string;
  readonly definition: Readonly<Record<string, unknown>>;
  readonly blocks: Readonly<Record<string, unknown>>;
};

export const effectCatalog = {
  "attack": {
    "contractId": "attack",
    "definition": {
        "typeId": "attack"
      },
    "blocks": {},
  },
  "fireball": {
    "contractId": "fireball",
    "definition": {
        "typeId": "fireball",
        "client": {
          "sendSpawn": true
        }
      },
    "blocks": {
      "jsEffect": "projectile/fireball",
      "parameters": {
          "speed": 320
        },
    },
  },
} as const satisfies Record<string, EffectCatalogEntry>;

export type EffectCatalog = typeof effectCatalog;
`

	if string(data) != expected {
		t.Fatalf("generated output mismatch\nexpected:\n%s\n\ngot:\n%s", expected, string(data))
	}
}
