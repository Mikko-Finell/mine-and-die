// Code generated by effectsgen. DO NOT EDIT.

export interface EffectBehaviorState {
  readonly ticksRemaining: number;
  readonly cooldownTicks?: number;
  readonly tickCadence?: number;
  readonly accumulatedDamage?: number;
  readonly stacks?: Readonly<Record<string, number>>;
  readonly extra?: Readonly<Record<string, number>>;
}

export interface EffectDefinition {
  readonly typeId: string;
  readonly delivery: DeliveryKind;
  readonly shape: GeometryShape;
  readonly motion: MotionKind;
  readonly impact: ImpactPolicy;
  readonly lifetimeTicks: number;
  readonly pierceCount?: number;
  readonly params?: Readonly<Record<string, number>>;
  readonly hooks: EffectHooks;
  readonly client: ReplicationSpec;
  readonly end: EndPolicy;
}

export interface EffectDeliveryState {
  readonly geometry: EffectGeometry;
  readonly motion: EffectMotionState;
  readonly attachedActorId?: string;
  readonly follow?: FollowMode;
}

export interface EffectGeometry {
  readonly shape: GeometryShape;
  readonly offsetX?: number;
  readonly offsetY?: number;
  readonly facing?: number;
  readonly arc?: number;
  readonly length?: number;
  readonly width?: number;
  readonly height?: number;
  readonly radius?: number;
  readonly extent?: number;
  readonly variants?: Readonly<Record<string, number>>;
}

export interface EffectHooks {
  readonly onSpawn?: string;
  readonly onTick?: string;
  readonly onHit?: string;
  readonly onExpire?: string;
}

export interface EffectInstance {
  readonly id: string;
  readonly entryId?: string;
  readonly definitionId: string;
  readonly definition?: EffectDefinition;
  readonly startTick: number;
  readonly deliveryState: EffectDeliveryState;
  readonly behaviorState: EffectBehaviorState;
  readonly params?: Readonly<Record<string, number>>;
  readonly colors?: ReadonlyArray<string>;
  readonly followActorId?: string;
  readonly ownerActorId?: string;
  readonly replication: ReplicationSpec;
  readonly end: EndPolicy;
}

export interface EffectMotionState {
  readonly positionX: number;
  readonly positionY: number;
  readonly velocityX: number;
  readonly velocityY: number;
  readonly rangeRemaining?: number;
  readonly travelledLength?: number;
}

export interface EndConditions {
  readonly onUnequip: boolean;
  readonly onOwnerDeath: boolean;
  readonly onOwnerLost: boolean;
  readonly onZoneChange: boolean;
  readonly onExplicitCancel: boolean;
}

export interface EndPolicy {
  readonly kind: EndPolicyKind;
  readonly conditions?: EndConditions;
}

export interface InstanceEndPayload {
  readonly id: string;
  readonly reason: EndReason;
}

export interface InstanceSpawnPayload {
  readonly instance: EffectInstance;
}

export interface InstanceUpdatePayload {
  readonly id: string;
  readonly deliveryState?: EffectDeliveryState;
  readonly behaviorState?: EffectBehaviorState;
  readonly params?: Readonly<Record<string, number>>;
}

export interface ReplicationSpec {
  readonly sendSpawn: boolean;
  readonly sendUpdates: boolean;
  readonly sendEnd: boolean;
  readonly managedByClient?: boolean;
  readonly updateFields?: Readonly<Record<string, boolean>>;
}

export type AttackEndPayload = InstanceEndPayload;

export type AttackSpawnPayload = InstanceSpawnPayload;

export type AttackUpdatePayload = InstanceUpdatePayload;

export type BloodSplatterEndPayload = InstanceEndPayload;

export type BloodSplatterSpawnPayload = InstanceSpawnPayload;

export type BloodSplatterUpdatePayload = InstanceUpdatePayload;

export type BurningTickEndPayload = InstanceEndPayload;

export type BurningTickSpawnPayload = InstanceSpawnPayload;

export type BurningTickUpdatePayload = InstanceUpdatePayload;

export type BurningVisualEndPayload = InstanceEndPayload;

export type BurningVisualSpawnPayload = InstanceSpawnPayload;

export type BurningVisualUpdatePayload = InstanceUpdatePayload;

export type DeliveryKind = "area" | "target" | "visual";

export type EndPolicyKind = 0 | 1 | 2;

export type EndReason = "cancelled" | "expired" | "mapChange" | "ownerLost";

export type FireballEndPayload = InstanceEndPayload;

export type FireballSpawnPayload = InstanceSpawnPayload;

export type FireballUpdatePayload = InstanceUpdatePayload;

export type FollowMode = "none" | "owner" | "target";

export type GeometryShape = "arc" | "capsule" | "circle" | "rect" | "segment";

export type ImpactPolicy = "all-in-path" | "first-hit" | "none" | "pierce";

export type MotionKind = "follow" | "instant" | "linear" | "none" | "parabolic";

export type EffectContractMap = {
  readonly "attack": {
    readonly spawn: AttackSpawnPayload;
    readonly update: AttackUpdatePayload;
    readonly end: AttackEndPayload;
  };
  readonly "blood-splatter": {
    readonly spawn: BloodSplatterSpawnPayload;
    readonly update: BloodSplatterUpdatePayload;
    readonly end: BloodSplatterEndPayload;
  };
  readonly "burning-tick": {
    readonly spawn: BurningTickSpawnPayload;
    readonly update: BurningTickUpdatePayload;
    readonly end: BurningTickEndPayload;
  };
  readonly "fire": {
    readonly spawn: BurningVisualSpawnPayload;
    readonly update: BurningVisualUpdatePayload;
    readonly end: BurningVisualEndPayload;
  };
  readonly "fireball": {
    readonly spawn: FireballSpawnPayload;
    readonly update: FireballUpdatePayload;
    readonly end: FireballEndPayload;
  };
};

export type EffectContractID = keyof EffectContractMap;

export type EffectCatalogEntry = {
  readonly contractId: string;
  readonly managedByClient: boolean;
  readonly definition: EffectDefinition;
  readonly blocks: Readonly<Record<string, unknown>>;
};

export const effectCatalog = {
  "attack": {
    "contractId": "attack",
    "managedByClient": true,
    "definition": {
        "typeId": "attack",
        "delivery": "area",
        "shape": "rect",
        "motion": "instant",
        "impact": "all-in-path",
        "lifetimeTicks": 1,
        "hooks": {
          "onSpawn": "melee.spawn"
        },
        "client": {
          "sendSpawn": true,
          "sendUpdates": false,
          "sendEnd": false
        },
        "end": {
          "kind": 1
        }
      },
    "blocks": {
      "jsEffect": "melee/swing",
      "parameters": {
          "damage": 10,
          "reach": 56,
          "width": 40
        },
    },
  },
  "blood-splatter": {
    "contractId": "blood-splatter",
    "managedByClient": true,
    "definition": {
        "typeId": "blood-splatter",
        "delivery": "visual",
        "shape": "rect",
        "motion": "none",
        "impact": "none",
        "lifetimeTicks": 1,
        "hooks": {
          "onSpawn": "visual.blood.splatter"
        },
        "client": {
          "sendSpawn": true,
          "sendUpdates": false,
          "sendEnd": false
        },
        "end": {
          "kind": 0
        }
      },
    "blocks": {
      "jsEffect": "visual/blood-splatter",
      "parameters": {
          "drops": 33
        },
    },
  },
  "burning-tick": {
    "contractId": "burning-tick",
    "managedByClient": false,
    "definition": {
        "typeId": "burning-tick",
        "delivery": "target",
        "shape": "rect",
        "motion": "instant",
        "impact": "first-hit",
        "lifetimeTicks": 1,
        "hooks": {
          "onSpawn": "status.burning.tick"
        },
        "client": {
          "sendSpawn": true,
          "sendUpdates": false,
          "sendEnd": true
        },
        "end": {
          "kind": 1
        }
      },
    "blocks": {
      "jsEffect": "status/burning-tick",
      "parameters": {
          "damage": 4
        },
    },
  },
  "fire": {
    "contractId": "fire",
    "managedByClient": false,
    "definition": {
        "typeId": "fire",
        "delivery": "target",
        "shape": "rect",
        "motion": "follow",
        "impact": "first-hit",
        "lifetimeTicks": 45,
        "hooks": {
          "onSpawn": "status.burning.visual",
          "onTick": "status.burning.visual"
        },
        "client": {
          "sendSpawn": true,
          "sendUpdates": true,
          "sendEnd": true
        },
        "end": {
          "kind": 0
        }
      },
    "blocks": {
      "jsEffect": "status/burning-visual",
      "parameters": {
          "tint": 1
        },
    },
  },
  "fireball": {
    "contractId": "fireball",
    "managedByClient": false,
    "definition": {
        "typeId": "fireball",
        "delivery": "area",
        "shape": "circle",
        "motion": "linear",
        "impact": "first-hit",
        "lifetimeTicks": 45,
        "hooks": {
          "onSpawn": "projectile.fireball.lifecycle",
          "onTick": "projectile.fireball.lifecycle"
        },
        "client": {
          "sendSpawn": true,
          "sendUpdates": true,
          "sendEnd": true
        },
        "end": {
          "kind": 0
        }
      },
    "blocks": {
      "jsEffect": "projectile/fireball",
      "parameters": {
          "speed": 320,
          "range": 200,
          "radius": 12
        },
    },
  },
} as const satisfies Record<string, EffectCatalogEntry>;

export type EffectCatalog = typeof effectCatalog;
